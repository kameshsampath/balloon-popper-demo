#!ansible-playbook
---
- name: Generate Risingwave source and sink
  hosts: localhost
  connection: local
  gather_facts: false

  vars_files:
    - defaults/main.yml

  vars:
    plf_sql_script_files:
      - file: "{{ plf_sql_scripts_dir }}/source.sql"
        template: "templates/source.sql.j2"
      - file: "{{ plf_sql_scripts_dir }}/sink.sql"
        template: "templates/sink.sql.j2"

  tasks:
    # Directory Setup
    - name: Ensure work directory exists
      ansible.builtin.file:
        path: "{{ plf_sql_scripts_dir }}"
        state: directory
        mode: "0755"
      tags:
        - source
        - sink

    - name: Parse principal credentials
      ansible.builtin.set_fact:
        "{{ columns[item|int] }}": "{{ csvline }}"
      vars:
        csvline: "{{ lookup('csvfile', plf_realm, file= plf_work_dir~'/principal.txt', delimiter=',', col=item) }}"
        columns: ["realm", "principal_client_id", "principal_client_secret"]
      loop: "{{ range(columns | length | int) }}"
      tags:
        - source
        - sink

    - name: Check if script files exist
      ansible.builtin.stat:
        path: "{{ item.file }}"
      loop: "{{ plf_sql_script_files }}"
      register: sql_script_file_stats
      tags:
        - source
        - sink

    - name: Create script files if they don't exist
      ansible.builtin.template:
        src: "{{ item.0.template }}"
        dest: "{{ item.0.file }}"
        mode: "0600"
      loop: "{{ plf_sql_script_files | zip(sql_script_file_stats.results) | list }}"
      loop_control:
        label: "{{ item.0.file }}"
      tags:
        - source
        - sink
